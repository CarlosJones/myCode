package com.waitandnotify;

//当在对象上调用wait()方法时，执行该代码的线程立即放弃它在对象上的锁。
//然而调用notify()时，并不意味着这时线程会放弃其锁。如果线程荣然在完成同步代码，则线程在移出之前不会放弃锁。
//因此，只要调用notify()并不意味着这时该锁变得可用。
public class ThreadA implements Runnable{
	private ThreadB b = null;
	
	public ThreadA(ThreadB b){
		this.b = b;
	}
	
	public void run(){
		synchronized(b){
			System.out.println(Thread.currentThread().getName()+"等待对象b完成计算。。。");
            //当前线程A在b对象上等待
           try {
					b.wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
            System.out.println(Thread.currentThread().getName()+"b对象计算的总和是：" + b.total); 
		}
	}
	public static void main(String[] args) {
		ThreadB b = new ThreadB();
		ThreadA a1 = new ThreadA(b);
		ThreadA a2 = new ThreadA(b);
		ThreadA a3 = new ThreadA(b);
		b.start();		
	}
}
